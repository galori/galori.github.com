<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | You've got a lot of Gal]]></title>
  <link href="http://galori.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://galori.github.com/"/>
  <updated>2013-07-27T22:05:59-07:00</updated>
  <id>http://galori.github.com/</id>
  <author>
    <name><![CDATA[Gal Steinitz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SVN: Full text search for a specific string in a commit]]></title>
    <link href="http://galori.github.com/blog/2013/07/27/svn-full-text-search-for-a-specific-string-in-a-commit/"/>
    <updated>2013-07-27T21:33:00-07:00</updated>
    <id>http://galori.github.com/blog/2013/07/27/svn-full-text-search-for-a-specific-string-in-a-commit</id>
    <content type="html"><![CDATA[<p>As a long time git user, I expected it to be easy to do a full text search in SVN for a specific string in all commits. Apparently, it is not! However...fret not git users! Since we're all so much more used to using Git, you might as well use the git-svn gateway for the project.</p>

<!--more-->


<p>This will allow you to use all the git commands you're used to, while actually pushing to an svn remote. It's bidirectional, and you can keep working this way indefinitely - while the rest of your team mates will continue to use SVN and will not be the wiser! Whats more - you now have the advantage of a distributed source control system, while not actually using one. You can commit your code locally to your hearts content and only push it to the remote when you're ready.</p>

<p>First, clone the repo into a new folder:</p>

<p><code>bash
git svn clone http://path/to/your/svn/repo
</code></p>

<p>Next, use the built in git -S option to do a full text search. This will show you every commit where this string was added or removed from any file. The -u option makes it so that the full diff of each commit is displayed, and not just the commit message.</p>

<p><code>bash
git log -S"the-string-you-want-to-find" -u
</code></p>

<p>The real answer? Start actually using git! <a href="https://git.wiki.kernel.org/index.php/GitSvnCrashCourse">Git Crash Course for SVN Users</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git tips: Count # of commits between two commits]]></title>
    <link href="http://galori.github.com/blog/2013/07/27/git-tips-count-number-of-commits-between-two-commits/"/>
    <updated>2013-07-27T21:30:00-07:00</updated>
    <id>http://galori.github.com/blog/2013/07/27/git-tips-count-number-of-commits-between-two-commits</id>
    <content type="html"><![CDATA[<p>Get # of commits between 2 commits (a.k.a between to SHA's):</p>

<p><code>bash
git log [first]..[second] --pretty=oneline | wc -l
</code></p>

<p>[first] and [second] can be SHA's, branches or tags.</p>

<p>(via <a href="https://twitter.com/GitHints/status/220223510491037696">gitTip Twitter account</a>)</p>
]]></content>
  </entry>
  
</feed>
